// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=get_6c8db5bb42
ROOST_METHOD_SIG_HASH=get_8ba8cbc874
"""
Scenario 1: Test to verify if the method throws an exception
Details:
  TestName: testGetThrowsRuntimeException
  Description: This test is designed to check if the 'get' method throws a RuntimeException as expected. The key parameter does not matter in this case since the method throws the exception unconditionally.
Execution:
  Arrange: No arrangement is needed as the method does not depend on any state.
  Act: Call the 'get' method with any arbitrary key.
  Assert: Use JUnit's assertThrows to check if a RuntimeException is thrown.
Validation:
  The assertion aims to verify that the 'get' method throws a RuntimeException. The expected result is a RuntimeException because the method's implementation is designed to throw this exception with a specific message. This test is significant to confirm that the method behaves as expected under all circumstances.
Scenario 2: Test to verify the exception message
Details:
  TestName: testGetExceptionMessage
  Description: This test is designed to check if the 'get' method throws a RuntimeException with the correct message.
Execution:
  Arrange: No arrangement is needed as the method does not depend on any state.
  Act: Call the 'get' method with any arbitrary key.
  Assert: Use JUnit's assertThrows to check if a RuntimeException is thrown, and then compare the exception message with the expected message.
Validation:
  The assertion aims to verify that the 'get' method throws a RuntimeException with the correct message. The expected result is the specific exception message because the method's implementation is designed to throw this exception with a specific message. This test is significant to confirm that the method behaves as expected and provides the correct diagnostic information when it fails.
"""
*/
// ********RoostGPT********
package com.cn.mock.service;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.experimental.categories.Category;

@Category({ Categories.get.class, Categories.roostTestTag1.class, Categories.roostTestTag2.class })
public class RedisServiceGetTest {

	@Test
	public void testGetThrowsRuntimeException() {
		RedisService redisService = new RedisService();
		Exception exception = assertThrows(RuntimeException.class, () -> {
			redisService.get("anyKey");
		});
		assertNotNull(exception);
	}

	@Test
	public void testGetExceptionMessage() {
		RedisService redisService = new RedisService();
		Exception exception = assertThrows(RuntimeException.class, () -> {
			redisService.get("anyKey");
		});
		String expectedMessage = "I'm redis service, you can not call me in unit test";
		String actualMessage = exception.getMessage();
		assertTrue(actualMessage.contains(expectedMessage));
	}

}